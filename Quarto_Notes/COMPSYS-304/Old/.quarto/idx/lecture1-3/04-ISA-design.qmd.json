{"title":"COMPSYS 304: Computer Architecture","markdown":{"headingText":"Instruction Set Architecture Design","containsRefs":false,"markdown":"\n## [Comparing different Instruction Set Architectures.]{color=\"red\"}\n\n[**Which one is the best? (for our example: C = A + B)**]{color=\"red\"}\n\n```{python}\n#| label: ISA Table\n#| echo: false\n#| fig-align: center\n#| cache: false\nimport matplotlib.pyplot as plt\nfrom matplotlib.table import Table\nfrom matplotlib import font_manager\nfont_files = font_manager.findSystemFonts(fontpaths=None)\n\nfor font_file in font_files:\n    font_manager.fontManager.addfont(font_file)\n\nplt.rcParams.update({\n    'font.family': 'Latin Modern Roman',\n    'mathtext.fontset': 'cm',\n    'font.size': 14\n})\n\n\n# Sample data for your table\ndata = [\n    [\"Push 1000\", \"Load 1000\", \"Load R1, 1000\", \"Load R1, 1000\"],\n    [\"Push 2000\", \"Add 2000\", \"Add R2, R1, 2000\", \"Load R2, 2000\"],\n    [\"Add\", \"Store 3000\", \"Store R2, 3000\", \"Add R3, R1, R2\"],\n    [\"Pop 3000\", \"\", \"\", \"Store R3, 3000\"]\n]\n\ncolumn_labels = [\"Stack\", \"Accumulator\", \"Register-Memory\", \"Register-Register\"]\n\n# Create a figure and axis\nfig, ax = plt.subplots(figsize=(10, 3.5))\n\n# Hide the axes\nax.xaxis.set_visible(False) \nax.yaxis.set_visible(False) \nax.set_frame_on(False)\n\n# Create a table\ntable = Table(ax, bbox=[0, 0, 1.1, 1.1])\n\n# Define colors for columns\nstack_col = '#FFFF66'  # Yellow\nreg_mem_col = '#CCCCFF'  # Light purple\nreg_reg_col = '#CCFFFF'  # Light cyan\n\n# Column widths\ncol_widths = [0.22, 0.22, 0.28, 0.28]\n\n# Add table headers with same colors as the respective columns\nheader_colors = [stack_col, '#FFFFFF', reg_mem_col, reg_reg_col]  # White for \"Accumulator\" column\n# weight='bold', color=\"#0A801D\"\n\n\n\nfor i, col_label in enumerate(column_labels):\n    table.add_cell(0, i, width=col_widths[i], height=0.1, text=col_label,\n                   loc='center', facecolor=header_colors[i], fontproperties=(font_manager.FontProperties(weight='bold')))\n\nfor i in range(len(column_labels)):\n    cell = table[0, i]\n    cell.get_text().set_color('#0A801D')\n# Add table data with matching colors\nfor row_idx, row in enumerate(data, start=1):\n    for col_idx, cell_value in enumerate(row):\n        cell_color = '#FFFFFF'  # Default white\n        if col_idx == 0:\n            cell_color = stack_col  # Yellow for Stack column\n        elif col_idx == 2:\n            cell_color = reg_mem_col  # Light purple for Register_Memory column\n        elif col_idx == 3:\n            cell_color = reg_reg_col  # Light cyan for Register_Register column\n        table.add_cell(row_idx, col_idx, width=col_widths[col_idx], height=0.1,\n                       text=cell_value, loc='center', facecolor=cell_color)\n\ntable.auto_set_font_size(False)  # Disable auto font size\ntable.set_fontsize(14)  # Set the font size for the table\n# Add the table to the axis\nax.add_table(table)\n\n# Show the figure\nplt.show()\n```\n\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxheadcol, coltitle=boxtitlecol, colbacktitle=boxheadcol, title=Basic ISA Classes\"}\nInstruction set architectures (ISA) are generally classified based on:\n- the instruction word size (how many bytes for encoding each instruction)\n- the number of different instructions in the ISA\n- the number of clock cycles required to complete each instruction (which can be implementation dependent)\n:::\n\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\nBased on that, the following have been specified as different ISA classes:\n\n- [**RISC**]{color=red} (Reduced Instruction Set Computers): where the size of the instruction word for all instructions are the same. This may lead to simpler decoding hardware. For example, **MIPS** (or RISC-V) processors use this type of ISA.\n\n- [**CISC**]{color=red} (Complex Instruction Set Computers): where the size of the instruction word may be different for different instructions. This results in more complex decoding hardware but the code footprint (binary code size of the program) can be less. for example, **Intel X86** based processors are based on this type of ISA.\n\n- [**EPIC**]{color=red} (Explicitly Parallel Instruction Computers): In this case, parallel operations are explicitly encoded in the instruction. The compiler plays a more important role in EPIC architectures. For example, **Intel Itanium** is based on this type of ISA.\n:::\n\n## Different levels of abstraction [(Software)]{color=\"red\"}\n\n<!-- ! PLACEHOLDER ! -->\n{{< placeholder >}}\n<!-- TODO: implement the diagram from notes -->\n\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxheadcol\"}\nAn abstraction removes unnecessary detail, helps us cope with the complexity. More hardware details are considered in programming through moving from [**High-Level Language**]{color=red} to [**Machine Language**]{color=red}.\n:::\n\n## [Basic steps in a CPU]{color=red} for \\underline{Instruction Processing}\n\n::: {layout=\"[30,70]\" fig-pos=\"H\"}\n::: {#first-column}\n<!-- ! PLACEHOLDER ! -->\n{{< placeholder >}}\n:::\n\n::: {#second-column}\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxheadcol, colbacktitle=boxheadcol, title=\\\\textcolor{red}{\\\\underline{\\\\textbf{Fetching}}}\"}\n\\underline{\\textbf{Access memory to get the next instruction:}}\nActivate memory read signal, place the right memory address on address lines, read the content of memory pointed by the address.\n:::\n:::\n:::\n\n::: {layout=\"[30,70]\" fig-pos=\"H\"}\n::: {#first-column}\n<!-- ! PLACEHOLDER ! -->\n{{< placeholder >}}\n:::\n\n::: {#second-column}\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxheadcol, colbacktitle=boxheadcol, title=\\\\textcolor{red}{\\\\underline{\\\\textbf{Decoding}}}\"}\n\\underline{\\textbf{Interpret the bits of the instruction word:}} to identify the operation and its data (which might be taken from memory or registers)\n:::\n:::\n:::\n\n::: {layout=\"[30,70]\" fig-pos=\"H\"}\n::: {#first-column}\n<!-- ! PLACEHOLDER ! -->\n{{< placeholder >}}\n:::\n\n::: {#second-column}\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxheadcol, colbacktitle=boxheadcol, title=\\\\textcolor{red}{\\\\underline{\\\\textbf{Execution}}}\"}\n\\underline{\\textbf{Perform that specific operation:}} Use the processor resources to perform the operation and write the result to memory or register if necessary\n:::\n:::\n:::\n\n::: {.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\n- What type of operations are needed?\n:::\n\n<!-- ! bloody table... -->\n\n::: {.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\n- How operands (data) are provided in each instruction?\n:::\n[**through registers except for \\underline{\\textit{load}} and \\underline{\\textit{store}} instructions which will access memory too.**]{color=\"red\"}\n\n::: {.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\n- Size of Instruction word and Data word?\n:::\n[**32 bits**]{color=red}\n\n## [\\underline{Summary of Our Design Decisions:}]{color=red}\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\n- \\underline{\\textbf{RISC ISA:}} All instructions have the same size\n    - **load/store architecture** (only [*load*]{color=red} and [*store*]{color=red} instructions can access memory).\n    - Other instructions use registers\n- [**Data word:**]{color=red} 32 bits (4 bytes)\n- [**Instruction word:**]{color=red} 32 bits (4 bytes)\n- [**Registers**]{color=red} 32 general purpose 32-bit registers\n- [**Size of Addressable Memory:**]{color=red} $ 2^32 $ (each memory address is 32 bits)\n- [**Operands:**]{color=red} Signed, unsigned, immediate\n\n*To make the implementation simpler and faster, the number of instructions in the ISA should be reduced as much as possible*\n\nALU operations are performed on:\n- data from registers, or\n- immediate value (data encoded into the instruction word)\n:::\n\n:::{.tcolorbox options=\"colback=boxbodycol2, colframe=boxheadcol2, title=\\\\underline{\\\\textbf{ALU operations}}, coltitle=boxtitlecol2, colbacktitle=boxheadcol2\"}\n- [**addition**]{color=red}\\\n**Both input data from registers (signed)** [**add**]{color=red} [***add, Rd, Rs, Rt***]{color=blue}\\\n**Both input data from registers (unsigned)** [**addu**]{color=red} [***addu, Rd, Rs, Rt***]{color=blue}\\\n**One input data as immediate value** [**addi**]{color=red} [***addi, Rt, Rs, immed.***]{color=blue}\n- [**subtraction**]{color=red}\\\n**Both input data from registers (signed)** [**sub**]{color=red} [***sub, Rd, Rs, Rt***]{color=blue}\\\n**Both input data from registers (unsigned)** [**subu**]{color=red} [***subu, Rd, Rs, Rt***]{color=blue}\n- [**AND**]{color=red}\\\n**Both input data from registers (signed)** [**and**]{color=red} [***and, Rd, Rs, Rt***]{color=blue}\\\n**One input data as immediate value** [**andi**]{color=red} [***andi, Rt, Rs, immed.***]{color=blue}\n- [**OR**]{color=red} [**or, ori**]{color=red} \n:::\n\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxheadcol, colbacktitle=boxheadcol, title=Shift operations, coltitle=boxtitlecol\"}\n{{< placeholder >}}\n:::{.tcolorbox options=\"oversize, left=11pt, right=11pt, colback=boxbodycol2, colframe=boxheadcol2, title=Example, coltitle=boxtitlecol2, colbacktitle=boxheadcol2\"}\nAssume that the contents of register R1 is as follows:\\\n[**1000 0000 1100 1010 0001 0111 0001 1110**]{color=red}\\\nAfter shifting two times to the left the following number is in register R1:\\\n[**0000 0011 0010 1000 0101 1100 0111 1000**]{color=red}\n:::\n:::\n\n:::{.tcolorbox options=\"colback=boxbodycol3, colframe=boxbodycol3\"}\n[**sll, sllv**]{color=blue} shift left logical [***sllv Rd, Rs, Rt***]{color=red}\\\n[**srl, srlv**]{color=blue} shift right logical [***srl Rd, Rs, immediate***]{color=red}\\\n[**sra, srav**]{color=blue} shift right arithmetic [***srav Rd, Rs, Rt***]{color=red}\n:::\n\n{{< placeholder >}}\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\nShift instructions can be used in arithmetic operations (multiplying or dividing by a number which is a power of 2). The number of bits to be shifted can be given as a constant value or the contents of the second source register can be used to determine how many bits to be shifted.\n:::\n{{< pagebreak >}}\n[***\\underline{A few points to remember:}***]{color=red}\n\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\n- In the instruction representation (in our case), always the [*destination register*]{color=red} is written first and then the [*source registers*]{color=red} (this convention may be different for other processors).\n- Registers in the instructions are represented using \\ $reg_num. (for example, register 1 is [\\$1]{color=red} and register 15 is [\\$15]{color=red}).\n- In our ISA (MIPS ISA) the contents of Register 0 (\\$0) is 0000 0000 0000 0000 0000 0000 0000 0000 and register \\$ cannot be written. (It is hardwired to 0)\n:::\n\n## [\\underline{\\textit{Examples of the MIPS ALU Instructions:}}]{color=red}\n\n:::{.tcolorbox options=\"colback=boxbodycol, colframe=boxbodycol\"}\n\n:::\n","srcMarkdownNoYaml":""},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":true,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"latexmk","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":["../preamble.tex"],"filters":["color-filter","latex-environment"],"pdf-engine-opts":["-synctex=1","-interaction=nonstopmode","-file-line-error","-lualatex","-shell-escape"],"toc":true,"toc-depth":3,"number-sections":true,"output-file":"04-ISA-design.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"environments":["tcolorbox"],"title":"COMPSYS 304: Computer Architecture","subtitle":"Lecture Notes","author":"Nicholas Russell","date":"09/03/2024","date-format":"full","hyperrefoptions":["pdfpagelabels"],"documentclass":"scrreprt","fontsize":"14pt","papersize":"a4","pagestyle":"plain","classoption":["headinclude=true","footinclude=true"],"geometry":["top=2.5cm","bottom=2.5cm","left=1.5cm","right=1.5cm","marginparsep=2cm"],"fontfamily":"lmodern"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}